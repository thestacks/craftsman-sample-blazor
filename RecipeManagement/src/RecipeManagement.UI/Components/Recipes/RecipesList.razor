
@inherits FluxorComponent

<RadzenDataGrid Count="@State.Value.TotalItems" Data="@State.Value.DataSet" IsLoading="@State.Value.IsLoading" LoadData="@LoadData"
                AllowPaging="true" AllowSorting="true" PagerAlwaysVisible="true" PagerHorizontalAlign="HorizontalAlign.Right" ShowPagingSummary="true"
                TItem="RecipeDto" Responsive="true"
                AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true"
                AllowColumnResize="true"
                @ref="DataGrid" PageSize="@PaginationConstants.DefaultPageSize">
    <Columns>
        <RadzenDataGridColumn TItem="RecipeDto" Sortable="true" Property="Id" Title="Id" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="RecipeDto" Sortable="true" Property="Title" Title="Title" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="RecipeDto" Sortable="true" Property="Directions" Title="Directions" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="RecipeDto" Sortable="true" Property="RecipeSourceLink" Title="Recipe Source Link" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="RecipeDto" Sortable="true" Property="Description" Title="Description" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="RecipeDto" Sortable="true" Property="ImageLink" Title="Image Link" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="RecipeDto" Title="Actions" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="recipe">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Click="() => OnEdit(recipe.Id)"/>
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="() => OnDelete(recipe)"/>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
<RadzenButton class="mt-3" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Success" Icon="add" Text="Add new" Click="HandleAddNewButton"/>

@code
{
    private RadzenDataGrid<RecipeDto> DataGrid;
    [Inject] private DialogService DialogService { get; set; }
    [Inject] private IActionSubscriber ActionSubscriber { get; set; }
    [Inject] private IDispatcher Dispatcher { get; set; }
    [Inject] private IState<RecipesListState> State { get; set; }

    protected override void OnInitialized()
    {
        ActionSubscriber.SubscribeToAction<RecipesListDeleteSucceededAction>(this, async _ =>
        {
            await DataGrid.Reload();
        });
        base.OnInitialized();
        LoadData(new LoadDataArgs());
    }

    private void LoadData(LoadDataArgs args)
    {
        Dispatcher.Dispatch(new RecipesListLoadAction(args));
    }

    private void HandleAddNewButton()
    {
        Dispatcher.Dispatch(new GoAction(FrontendRoutes.Recipes.New));
    }

    private void OnEdit(Guid id)
    {
        Dispatcher.Dispatch(new GoAction(FrontendRoutes.GetRouteWithParameter(FrontendRoutes.Recipes.Edit, id)));

    }

    private async Task OnDelete(RecipeDto recipe)
    {
        var confirmation = await DialogService.OpenAsync("Are you sure?", ds => @<div>
                                                                                    <p>Do you want to remove following recipe? <br/>
                                                                                        <b>@recipe.Title</b>
                                                                                        <div class="row">
                                                                                            <div class="col d-flex justify-content-center">
                                                                                                <RadzenButton Text="Yes" Click="() => ds.Close(true)" class="mr-3"/>
                                                                                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="No" Click="() => ds.Close(false)"/>
                                                                                            </div>
                                                                                        </div>
                                                                                    </p>
                                                                                </div>);
        if (confirmation is null or false)
            return;
        
        Dispatcher.Dispatch(new RecipesListDeleteAction(recipe.Id));
    }
}